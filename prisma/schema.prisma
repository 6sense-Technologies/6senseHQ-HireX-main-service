datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  phone         String?
  email         String   @unique
  password      String?
  refresh_token String?  @db.String
  access_token  String?  @db.String
  provider      String?  @db.String
  providerId    String?  @db.String
  is_verified   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  is_deleted    Boolean  @default(false)
  roleIds       String[] @db.ObjectId
  roles         Role[]   @relation(fields: [roleIds], references: [id])
  jobs          Job[]    @relation("userJobs")
}

model Role {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  roleName     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  is_deleted   Boolean      @default(false)
  users        User[]       @relation(fields: [userId], references: [id])
  userId       String[]     @db.ObjectId
  Permission   Permission[] @relation(fields: [permissionId], references: [id])
  permissionId String[]     @db.ObjectId
}

model Permission {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  permissionName String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  is_deleted     Boolean  @default(false)
  roles          Role[]   @relation(fields: [roleId], references: [id])
  roleId         String[] @db.ObjectId
}

model Job {
  jobId             String              @id @default(auto()) @map("_id") @db.ObjectId
  deadline          String?
  jobResponsibility String
  jobKeywords       String[]
  vacancy           Int
  createdBy         String              @db.ObjectId
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  jobPosition       JobPosition         @relation(fields: [jobPositionId], references: [jobPositionId])
  jobPositionId     String              @db.ObjectId
  jobDepartment     JobDepartment?      @relation(fields: [jobDepartmentId], references: [jobDepartmentId])
  jobDepartmentId   String?             @db.ObjectId
  candidate         Candidate[]         @relation(fields: [candidateId], references: [candidateId])
  candidateId       String[]            @db.ObjectId
  JobInterviewStage JobInterviewStage[]
  createdByUser     User                @relation("userJobs", fields: [createdBy], references: [id])
}

model JobPosition {
  jobPositionId   String   @id @default(auto()) @map("_id") @db.ObjectId
  jobPositionName String
  createdBy       String   @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDeleted       Boolean
  Job             Job[]
}

model JobDepartment {
  jobDepartmentId   String   @id @default(auto()) @map("_id") @db.ObjectId
  jobDepartmentName String
  createdBy         String   @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isDeleted         Boolean
  Job               Job[]
}

model Candidate {
  candidateId String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  jobs        Job[]    @relation(fields: [jobId], references: [jobId])
  jobId       String[] @db.ObjectId
}

model InterviewStage {
  interviewStageId   String   @id @default(auto()) @map("_id") @db.ObjectId
  interviewStageName String
  createdBy          String   @db.ObjectId()
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  isDeleted          Boolean  @default(false)

  jobInterviewStages JobInterviewStage[]
}

model JobInterviewStage {
  jobInterviewStageId String   @id @default(auto()) @map("_id") @db.ObjectId
  interviewFormat     String
  interviewType       String
  interviewMedium     String
  createdBy           String   @db.ObjectId()
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  isDeleted           Boolean  @default(false)

  interviewStage   InterviewStage @relation(fields: [interviewStageId], references: [interviewStageId])
  interviewStageId String         @db.ObjectId

  job   Job?    @relation(fields: [jobId], references: [jobId])
  jobId String? @db.ObjectId
}
